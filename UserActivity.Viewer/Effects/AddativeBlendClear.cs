//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserActivity.Viewer.Effects
{
    using System;
    using System.Windows;
    using System.Windows.Media;
    using System.Windows.Media.Effects;
    using System.Windows.Media.Media3D;
    
    
    /// <summary>An effect that controls brightness and contrast.</summary>
    public class AddativeBlendClear : System.Windows.Media.Effects.ShaderEffect
    {
        
        /// <summary></summary>
        public static readonly DependencyProperty ClearColorProperty = DependencyProperty.Register("ClearColor",
            typeof(System.Windows.Media.Color),
            typeof(AddativeBlendClear),
            new UIPropertyMetadata(Color.FromScRgb(1,0,0,0), PixelShaderConstantCallback(0)));

        /// <summary></summary>
        public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(AddativeBlendClear), 0, SamplingMode.Auto);
        
        public AddativeBlendClear()
        {
            PixelShader pixelShader = new PixelShader();
			pixelShader.UriSource = new Uri("/UserActivity.Viewer;component/Effects/AddativeBlendClear.ps", UriKind.Relative);
            this.PixelShader = pixelShader;
            this.UpdateShaderValue(ClearColorProperty);
            this.UpdateShaderValue(InputProperty);
        }
        
        /// <summary></summary>
        public virtual System.Windows.Media.Color ClearColor
        {
            get { return ((System.Windows.Media.Color)(this.GetValue(ClearColorProperty))); }
            set { this.SetValue(ClearColorProperty, value); }
        }
        
        /// <summary></summary>
        public virtual System.Windows.Media.Brush Input
        {
            get { return ((System.Windows.Media.Brush)(this.GetValue(InputProperty))); }
            set { this.SetValue(InputProperty, value); }
        }
    }
}
